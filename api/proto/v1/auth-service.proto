syntax = "proto3";
option go_package = "v1/";
package v1;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "Auth Service";
        version: "1.0";
        contact: {
            name: "auth service project";
            url: "https://github.com/subash68/bcm-auth";
            email: "bsubi68@gmail.com";
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
        key: "404";
        value: {
            description: "Returned when the resource does not exist.";
            schema: {
                json_schema: {
                    type: STRING;
                }
            }
        }
    }
};

message Auth {
    int64 id = 1;
    string token = 2;
    string description = 3;
}

message CreateRequest {
    string api = 1;
    Auth auth = 2;
}

message CreateResponse {
    string api = 1;
    int64 id = 2;
}

message ReadRequest {
    string api = 1;
    int64 id = 2;
}

message ReadResponse {
    string api = 1;
    Auth auth = 2;
}

message UpdateRequest {
    string api = 1;

    Auth auth = 2;
}

message UpdateResponse {
    string api = 1;
    int64 updated = 2;
}

message DeleteRequest {
    string api = 1;
    int64 id = 2;
}

message DeleteResponse {
    string api = 1;
    int64 deleted = 2;
}

message ReadAllRequest {
    string api = 1;
}

message ReadAllResponse {
    string api = 1;
    repeated Auth auth = 2;
}


service AuthService {

    rpc ReadAll(ReadAllRequest) returns (ReadAllResponse) {
        option (google.api.http) = {
            get: "/v1/auth/all"
        };
    }
    //Create call
    rpc Create(CreateRequest) returns (CreateResponse) {
        option (google.api.http) = {
            post: "/v1/auth"
            body: "*"
        };
    }

    rpc Read(ReadRequest) returns (ReadResponse) {
        option (google.api.http) = {
            get: "/v1/auth/{id}"
        };
    }

    rpc Update(UpdateRequest) returns (UpdateResponse) {
        option (google.api.http) = {
            put: "/v1/auth/{auth.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/auth/{auth.id}"
                body: "*"
            }
        };
    }

    rpc Delete(DeleteRequest) returns (DeleteResponse) {
        option (google.api.http) = {
            delete: "/v1/auth/{id}"
        };
    }

   
}